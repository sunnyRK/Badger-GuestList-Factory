/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PriceOracleInterface extends utils.Interface {
  functions: {
    "addNewOrEditRouter(address,bool)": FunctionFragment;
    "disableOrEnableRouter(address,bool)": FunctionFragment;
    "getBestQuoteFromOracleAggregator(address,address,uint256)": FunctionFragment;
    "getUnderlyingPrice(address,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "iUniswapLPOracleFactory()": FunctionFragment;
    "indexByRouter(address)": FunctionFragment;
    "isRouterWorking(uint256)": FunctionFragment;
    "routerByIndex(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "totalRouters()": FunctionFragment;
    "viewUnderlyingPrice(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNewOrEditRouter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableOrEnableRouter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestQuoteFromOracleAggregator",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iUniswapLPOracleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexByRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRouterWorking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "routerByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRouters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewUnderlyingPrice",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewOrEditRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableOrEnableRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestQuoteFromOracleAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "iUniswapLPOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexByRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRouterWorking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUnderlyingPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewOrEditRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableOrEnableRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestQuoteFromOracleAggregator(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { routerString: string; quote: BigNumber }
    >;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<[string]>;

    indexByRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isRouterWorking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    routerByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRouters(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalLpPrice: BigNumber }>;
  };

  addNewOrEditRouter(
    _router: string,
    _isRouterWorking: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableOrEnableRouter(
    _router: string,
    _isRouterWorking: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestQuoteFromOracleAggregator(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { routerString: string; quote: BigNumber }>;

  getUnderlyingPrice(
    _lpToken: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<string>;

  indexByRouter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isRouterWorking(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  routerByIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setGovernance(
    _newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRouters(overrides?: CallOverrides): Promise<BigNumber>;

  viewUnderlyingPrice(
    _lpToken: string,
    _lpAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addNewOrEditRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    disableOrEnableRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBestQuoteFromOracleAggregator(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { routerString: string; quote: BigNumber }
    >;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<string>;

    indexByRouter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRouterWorking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    routerByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setGovernance(
      _newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRouters(overrides?: CallOverrides): Promise<BigNumber>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addNewOrEditRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableOrEnableRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestQuoteFromOracleAggregator(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    indexByRouter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRouterWorking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRouters(overrides?: CallOverrides): Promise<BigNumber>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewOrEditRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableOrEnableRouter(
      _router: string,
      _isRouterWorking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestQuoteFromOracleAggregator(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iUniswapLPOracleFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexByRouter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouterWorking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerByIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRouters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
