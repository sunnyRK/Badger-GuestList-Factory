/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PriceOracleInterface extends utils.Interface {
  functions: {
    "CURVE_ROUTER()": FunctionFragment;
    "SOLIDLY_ROUTER()": FunctionFragment;
    "SPOOKY_ROUTER()": FunctionFragment;
    "chainRouters(uint256)": FunctionFragment;
    "findOptimalSwap(address,address,uint256)": FunctionFragment;
    "getChainID()": FunctionFragment;
    "getCurveQuote()": FunctionFragment;
    "getSolidlyQuote()": FunctionFragment;
    "getUnderlyingPrice(address,uint256)": FunctionFragment;
    "getUniV2Quote()": FunctionFragment;
    "iUniswapLPOracleFactory()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRoutersForSpecificChainId(uint256,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewUnderlyingPrice(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CURVE_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOLIDLY_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPOOKY_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainRouters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findOptimalSwap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurveQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSolidlyQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniV2Quote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iUniswapLPOracleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutersForSpecificChainId",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUnderlyingPrice",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CURVE_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOLIDLY_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPOOKY_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findOptimalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSolidlyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniV2Quote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iUniswapLPOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoutersForSpecificChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUnderlyingPrice",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CURVE_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    SOLIDLY_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    SPOOKY_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    chainRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        SPOOKY_ROUTER: string;
        SOLIDLY_ROUTER: string;
        CURVE_ROUTER: string;
      }
    >;

    findOptimalSwap(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { amount: BigNumber }>;

    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurveQuote(overrides?: CallOverrides): Promise<[string]>;

    getSolidlyQuote(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUniV2Quote(overrides?: CallOverrides): Promise<[string]>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoutersForSpecificChainId(
      chainId: BigNumberish,
      _spookyRouter: string,
      _solidlyRouter: string,
      _curveRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalLpPrice: BigNumber }>;
  };

  CURVE_ROUTER(overrides?: CallOverrides): Promise<string>;

  SOLIDLY_ROUTER(overrides?: CallOverrides): Promise<string>;

  SPOOKY_ROUTER(overrides?: CallOverrides): Promise<string>;

  chainRouters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      SPOOKY_ROUTER: string;
      SOLIDLY_ROUTER: string;
      CURVE_ROUTER: string;
    }
  >;

  findOptimalSwap(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { amount: BigNumber }>;

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  getCurveQuote(overrides?: CallOverrides): Promise<string>;

  getSolidlyQuote(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    _lpToken: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUniV2Quote(overrides?: CallOverrides): Promise<string>;

  iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoutersForSpecificChainId(
    chainId: BigNumberish,
    _spookyRouter: string,
    _solidlyRouter: string,
    _curveRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewUnderlyingPrice(
    _lpToken: string,
    _lpAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CURVE_ROUTER(overrides?: CallOverrides): Promise<string>;

    SOLIDLY_ROUTER(overrides?: CallOverrides): Promise<string>;

    SPOOKY_ROUTER(overrides?: CallOverrides): Promise<string>;

    chainRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        SPOOKY_ROUTER: string;
        SOLIDLY_ROUTER: string;
        CURVE_ROUTER: string;
      }
    >;

    findOptimalSwap(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { amount: BigNumber }>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getCurveQuote(overrides?: CallOverrides): Promise<string>;

    getSolidlyQuote(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniV2Quote(overrides?: CallOverrides): Promise<string>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRoutersForSpecificChainId(
      chainId: BigNumberish,
      _spookyRouter: string,
      _solidlyRouter: string,
      _curveRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CURVE_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    SOLIDLY_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    SPOOKY_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    chainRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findOptimalSwap(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getCurveQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getSolidlyQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUniV2Quote(overrides?: CallOverrides): Promise<BigNumber>;

    iUniswapLPOracleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoutersForSpecificChainId(
      chainId: BigNumberish,
      _spookyRouter: string,
      _solidlyRouter: string,
      _curveRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CURVE_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SOLIDLY_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SPOOKY_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainRouters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findOptimalSwap(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurveQuote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSolidlyQuote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUniV2Quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iUniswapLPOracleFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoutersForSpecificChainId(
      chainId: BigNumberish,
      _spookyRouter: string,
      _solidlyRouter: string,
      _curveRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewUnderlyingPrice(
      _lpToken: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
