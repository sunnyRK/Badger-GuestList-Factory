/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UniswapLPOracleFactoryInterface extends utils.Interface {
  functions: {
    "LPAssetTracker(address,uint256)": FunctionFragment;
    "OneToken(address)": FunctionFragment;
    "OneUSDC()": FunctionFragment;
    "USDC()": FunctionFragment;
    "_calculatePriceOfLP(uint256,uint256,uint256,uint8)": FunctionFragment;
    "createNewOracles(address,address,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getPriceOfToken(address,uint256)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "instanceTracker(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenToUSDC(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "usdc_add()": FunctionFragment;
    "viewPriceOfToken(address,uint256)": FunctionFragment;
    "viewUnderlyingPrice(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LPAssetTracker",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "OneToken", values: [string]): string;
  encodeFunctionData(functionFragment: "OneUSDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_calculatePriceOfLP",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewOracles",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceOfToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceTracker",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenToUSDC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdc_add", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewPriceOfToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewUnderlyingPrice",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LPAssetTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OneToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OneUSDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_calculatePriceOfLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instanceTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc_add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewPriceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewUnderlyingPrice",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UniswapLPOracleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapLPOracleFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LPAssetTracker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    OneToken(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    OneUSDC(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    _calculatePriceOfLP(
      supply: BigNumberish,
      value0: BigNumberish,
      value1: BigNumberish,
      supplyDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createNewOracles(
      _tokenA: string,
      _tokenB: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUnderlyingPrice(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instanceTracker(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToUSDC(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    usdc_add(overrides?: CallOverrides): Promise<[string]>;

    viewPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewUnderlyingPrice(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  LPAssetTracker(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  OneToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  OneUSDC(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  _calculatePriceOfLP(
    supply: BigNumberish,
    value0: BigNumberish,
    value1: BigNumberish,
    supplyDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createNewOracles(
    _tokenA: string,
    _tokenB: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getPriceOfToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUnderlyingPrice(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instanceTracker(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToUSDC(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  usdc_add(overrides?: CallOverrides): Promise<string>;

  viewPriceOfToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewUnderlyingPrice(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    LPAssetTracker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    OneToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    OneUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    _calculatePriceOfLP(
      supply: BigNumberish,
      value0: BigNumberish,
      value1: BigNumberish,
      supplyDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewOracles(
      _tokenA: string,
      _tokenB: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instanceTracker(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenToUSDC(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    usdc_add(overrides?: CallOverrides): Promise<string>;

    viewPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUnderlyingPrice(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    LPAssetTracker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OneToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    OneUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    _calculatePriceOfLP(
      supply: BigNumberish,
      value0: BigNumberish,
      value1: BigNumberish,
      supplyDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewOracles(
      _tokenA: string,
      _tokenB: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instanceTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToUSDC(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    usdc_add(overrides?: CallOverrides): Promise<BigNumber>;

    viewPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewUnderlyingPrice(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LPAssetTracker(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OneToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OneUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _calculatePriceOfLP(
      supply: BigNumberish,
      value0: BigNumberish,
      value1: BigNumberish,
      supplyDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewOracles(
      _tokenA: string,
      _tokenB: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instanceTracker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToUSDC(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdc_add(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewPriceOfToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewUnderlyingPrice(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
